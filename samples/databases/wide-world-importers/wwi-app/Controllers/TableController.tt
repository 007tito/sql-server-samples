<#@ output extension=".cs"#>
<#@ assembly name="Newtonsoft.Json" #>
<#@ template language="C#" hostspecific="True" #>
<#
	var o = Newtonsoft.Json.Linq.JObject.Parse(System.IO.File.ReadAllText(this.Host.ResolvePath("..") + "\\appsettings.Development.json"));
	var json = o["ApiModel"].ToString();
	TableDef[] config = Newtonsoft.Json.JsonConvert.DeserializeObject<TableDef[]>(json);
#>
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Belgrade.SqlClient;
using SqlServerRestApi;

namespace wwi_app.Controllers
{
    public class TableController : Controller
    {
        IQueryPipe sqlQuery = null;

        public TableController(IQueryPipe sqlQueryService)
        {
            this.sqlQuery = sqlQueryService;
        }

<# foreach(var t in config) {#>
		<# if(string.IsNullOrEmpty(t.TableColumns)) continue; #>

        private static readonly TableSpec <#= t.Table.ToLower() #> = new TableSpec("<#= t.Schema #>","<#= t.Table #>", "<#= t.TableColumns #>");
        public async Task <#= t.Table #>()
        {
            await this
				.Table(<#= t.Table.ToLower() #>, this.sqlQuery)
				.OnError(e => { this.Response.Body.Dispose(); throw e; })
				.Process();
        }
<# } #>
    }
}

<#+
	public class TableDef { public string Schema {get; set;} public string Table {get; set;} public string TableColumns {get; set;}}
#>